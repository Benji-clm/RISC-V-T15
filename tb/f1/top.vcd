$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 U! clk $end
  $var wire 1 V! rst $end
  $var wire 1 W! trigger $end
  $var wire 32 X! a0 [31:0] $end
  $scope module top $end
   $var wire 32 [! DATA_WIDTH [31:0] $end
   $var wire 32 [! ADDRESS_WIDTH [31:0] $end
   $var wire 1 U! clk $end
   $var wire 1 V! rst $end
   $var wire 1 W! trigger $end
   $var wire 32 X! a0 [31:0] $end
   $var wire 32 # next_pc [31:0] $end
   $var wire 32 $ instr [31:0] $end
   $var wire 32 % SrcAE [31:0] $end
   $var wire 32 & WriteDataE [31:0] $end
   $var wire 32 ' SrcBE [31:0] $end
   $var wire 1 ( eq $end
   $var wire 32 ) ALUResult [31:0] $end
   $var wire 32 * pcF [31:0] $end
   $var wire 32 + PCPlus4F [31:0] $end
   $var wire 32 , instrD [31:0] $end
   $var wire 1 - RegWriteD $end
   $var wire 2 . ResultSrcD [1:0] $end
   $var wire 1 / MemWriteD $end
   $var wire 3 0 PCsrcD [2:0] $end
   $var wire 4 1 ALUControlD [3:0] $end
   $var wire 1 2 ALUsrcD $end
   $var wire 3 3 ImmSrcD [2:0] $end
   $var wire 32 Y! rd1 [31:0] $end
   $var wire 32 Z! rd2 [31:0] $end
   $var wire 32 4 pcD [31:0] $end
   $var wire 5 5 Rs1D [4:0] $end
   $var wire 5 6 Rs2D [4:0] $end
   $var wire 5 7 RdD [4:0] $end
   $var wire 32 8 ImmExtD [31:0] $end
   $var wire 32 9 PCPlus4D [31:0] $end
   $var wire 3 : LS_modeD [2:0] $end
   $var wire 1 ; RegWriteE $end
   $var wire 2 < ResultSrcE [1:0] $end
   $var wire 1 = MemWriteE $end
   $var wire 3 > PCsrcE [2:0] $end
   $var wire 4 ? ALUControlE [3:0] $end
   $var wire 1 @ ALUsrcE $end
   $var wire 32 A rd1E [31:0] $end
   $var wire 32 B rd2E [31:0] $end
   $var wire 32 C pcE [31:0] $end
   $var wire 5 D Rs1E [4:0] $end
   $var wire 5 E Rs2E [4:0] $end
   $var wire 5 F RdE [4:0] $end
   $var wire 32 G ImmExtE [31:0] $end
   $var wire 32 H PCPlus4E [31:0] $end
   $var wire 3 I LS_modeE [2:0] $end
   $var wire 1 J RegWriteM $end
   $var wire 2 K ResultSrcM [1:0] $end
   $var wire 1 L MemWriteM $end
   $var wire 32 M ALUResultM [31:0] $end
   $var wire 32 N WriteDataM [31:0] $end
   $var wire 5 O RdM [4:0] $end
   $var wire 32 P PCPlus4M [31:0] $end
   $var wire 3 Q LS_modeM [2:0] $end
   $var wire 1 R RegWriteW $end
   $var wire 2 S ResultSrcW [1:0] $end
   $var wire 32 T ALUResultW [31:0] $end
   $var wire 32 U ReadDataW [31:0] $end
   $var wire 5 V RdW [4:0] $end
   $var wire 32 W PCPlus4W [31:0] $end
   $var wire 32 X ResultW [31:0] $end
   $var wire 32 Y rd [31:0] $end
   $var wire 1 Z Hazard_PCsrc $end
   $var wire 1 [ StallF $end
   $var wire 1 \ StallD $end
   $var wire 1 Z FlushD $end
   $var wire 1 Z FlushE $end
   $var wire 2 ] ForwardAE [1:0] $end
   $var wire 2 ^ ForwardBE [1:0] $end
   $var wire 1 _ MemReadD $end
   $var wire 1 ` MemReadE $end
   $var wire 1 a MemReadM $end
   $var wire 7 b op [6:0] $end
   $var wire 3 c funct3 [2:0] $end
   $var wire 7 d funct7 [6:0] $end
   $var wire 25 e instr_ext [31:7] $end
   $scope module SignExtend $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 25 e instr [31:7] $end
    $var wire 3 3 ImmSrc [2:0] $end
    $var wire 32 8 ImmOp [31:0] $end
   $upscope $end
   $scope module alu_ $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 32 % ALUop1 [31:0] $end
    $var wire 32 ' ALUop2 [31:0] $end
    $var wire 4 ? ALUctrl [3:0] $end
    $var wire 32 ) ALUout [31:0] $end
    $var wire 1 ( eq $end
    $var wire 32 % op1_signed [31:0] $end
    $var wire 32 ' op2_signed [31:0] $end
   $upscope $end
   $scope module cache $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 32 \! CACHE_SIZE [31:0] $end
    $var wire 32 ]! LINE_SIZE [31:0] $end
    $var wire 32 ^! ASSOC [31:0] $end
    $var wire 32 [! ADDR_WIDTH [31:0] $end
    $var wire 1 U! clk $end
    $var wire 1 V! reset $end
    $var wire 32 * pc [31:0] $end
    $var wire 32 $ instr [31:0] $end
    $var wire 32 f mem_instr [31:0] $end
    $var wire 128 g mem_data [127:0] $end
    $var wire 32 k aligned_pc [31:0] $end
    $var wire 8 l index [7:0] $end
    $var wire 22 m tag [21:0] $end
    $var wire 2 n block_offset [1:0] $end
    $var wire 1 o hit $end
    $var wire 2 p hit_way [1:0] $end
    $scope module mem_inst $end
     $var wire 32 [! DATA_WIDTH [31:0] $end
     $var wire 32 k pc [31:0] $end
     $var wire 32 f instr [31:0] $end
    $upscope $end
    $scope module unnamedblk1 $end
     $var wire 32 _! i [31:0] $end
    $upscope $end
    $scope module unnamedblk2 $end
     $var wire 32 `! i [31:0] $end
    $upscope $end
    $scope module unnamedblk3 $end
     $var wire 32 q i [31:0] $end
    $upscope $end
    $scope module unnamedblk4 $end
     $var wire 32 r i [31:0] $end
     $scope module unnamedblk5 $end
      $var wire 32 s j [31:0] $end
     $upscope $end
    $upscope $end
    $scope module unnamedblk6 $end
     $var wire 1 t lru_way [0:0] $end
     $scope module unnamedblk7 $end
      $var wire 32 u i [31:0] $end
     $upscope $end
     $scope module unnamedblk8 $end
      $var wire 32 v i [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module ctrl_unit $end
    $var wire 7 b op [6:0] $end
    $var wire 1 \ stall $end
    $var wire 3 c funct3 [2:0] $end
    $var wire 7 d funct7 [6:0] $end
    $var wire 3 0 PCsrc [2:0] $end
    $var wire 2 . ResultSrc [1:0] $end
    $var wire 1 / MemWrite $end
    $var wire 4 1 ALUControl [3:0] $end
    $var wire 1 2 ALUsrc $end
    $var wire 3 3 ImmSrc [2:0] $end
    $var wire 1 - RegWrite $end
    $var wire 3 : LS_mode [2:0] $end
    $var wire 1 _ MemRead $end
   $upscope $end
   $scope module hazard_unit_ $end
    $var wire 5 5 Rs1D [4:0] $end
    $var wire 5 6 Rs2D [4:0] $end
    $var wire 5 D Rs1E [4:0] $end
    $var wire 5 E Rs2E [4:0] $end
    $var wire 5 F RdE [4:0] $end
    $var wire 1 Z Hazard_PCsrc $end
    $var wire 1 w ResultSrcE $end
    $var wire 5 O RdM [4:0] $end
    $var wire 5 V RdW [4:0] $end
    $var wire 1 J RegWriteM $end
    $var wire 1 R RegWriteW $end
    $var wire 1 [ StallF $end
    $var wire 1 \ StallD $end
    $var wire 1 Z FlushD $end
    $var wire 1 Z FlushE $end
    $var wire 2 ] ForwardAE [1:0] $end
    $var wire 2 ^ ForwardBE [1:0] $end
    $var wire 1 x lwStall $end
   $upscope $end
   $scope module mux2 $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 32 & in0 [31:0] $end
    $var wire 32 G in1 [31:0] $end
    $var wire 1 @ sel $end
    $var wire 32 ' out [31:0] $end
   $upscope $end
   $scope module mux3_ $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 32 T in0 [31:0] $end
    $var wire 32 U in1 [31:0] $end
    $var wire 32 W in2 [31:0] $end
    $var wire 2 S sel [1:0] $end
    $var wire 32 X out [31:0] $end
   $upscope $end
   $scope module muxForwardAE $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 32 A in0 [31:0] $end
    $var wire 32 X in1 [31:0] $end
    $var wire 32 M in2 [31:0] $end
    $var wire 2 ] sel [1:0] $end
    $var wire 32 % out [31:0] $end
   $upscope $end
   $scope module muxForwardBE $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 32 B in0 [31:0] $end
    $var wire 32 X in1 [31:0] $end
    $var wire 32 M in2 [31:0] $end
    $var wire 2 ^ sel [1:0] $end
    $var wire 32 & out [31:0] $end
   $upscope $end
   $scope module pc_counter $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 3 > PCsrcE [2:0] $end
    $var wire 32 y PCTargetE [31:0] $end
    $var wire 32 + PCPlus4F [31:0] $end
    $var wire 32 ) ALUResult [31:0] $end
    $var wire 1 ( eq $end
    $var wire 32 # pc [31:0] $end
    $var wire 1 Z Hazard_PCsrc $end
   $upscope $end
   $scope module pipeline_DE_inst $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 1 U! clk $end
    $var wire 1 Z FlushE $end
    $var wire 1 - RegWriteD $end
    $var wire 2 . ResultSrcD [1:0] $end
    $var wire 1 / MemWriteD $end
    $var wire 3 0 PCsrcD [2:0] $end
    $var wire 4 1 ALUControlD [3:0] $end
    $var wire 1 2 ALUsrcD $end
    $var wire 32 Y! rd1 [31:0] $end
    $var wire 32 Z! rd2 [31:0] $end
    $var wire 32 4 pcD [31:0] $end
    $var wire 32 9 PCPlus4D [31:0] $end
    $var wire 32 8 ImmExtD [31:0] $end
    $var wire 5 5 Rs1D [4:0] $end
    $var wire 5 6 Rs2D [4:0] $end
    $var wire 5 7 RdD [4:0] $end
    $var wire 3 : LS_modeD [2:0] $end
    $var wire 1 _ MemReadD $end
    $var wire 1 ; RegWriteE $end
    $var wire 2 < ResultSrcE [1:0] $end
    $var wire 1 = MemWriteE $end
    $var wire 3 > PCsrcE [2:0] $end
    $var wire 4 ? ALUControlE [3:0] $end
    $var wire 1 @ ALUsrcE $end
    $var wire 32 A rd1E [31:0] $end
    $var wire 32 B rd2E [31:0] $end
    $var wire 32 C pcE [31:0] $end
    $var wire 32 H PCPlus4E [31:0] $end
    $var wire 32 G ImmExtE [31:0] $end
    $var wire 5 D Rs1E [4:0] $end
    $var wire 5 E Rs2E [4:0] $end
    $var wire 5 F RdE [4:0] $end
    $var wire 3 I LS_modeE [2:0] $end
    $var wire 1 ` MemReadE $end
   $upscope $end
   $scope module pipeline_EM $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 1 U! clk $end
    $var wire 32 ) ALUResult [31:0] $end
    $var wire 32 & WriteDataE [31:0] $end
    $var wire 32 H PCPlus4E [31:0] $end
    $var wire 1 = MemWriteE $end
    $var wire 1 ` MemReadE $end
    $var wire 3 I LS_modeE [2:0] $end
    $var wire 5 F RdE [4:0] $end
    $var wire 1 ; RegWriteE $end
    $var wire 2 < ResultSrcE [1:0] $end
    $var wire 32 M ALUResultM [31:0] $end
    $var wire 32 N WriteDataM [31:0] $end
    $var wire 32 P PCPlus4M [31:0] $end
    $var wire 1 L MemWriteM $end
    $var wire 1 a MemReadM $end
    $var wire 3 Q LS_modeM [2:0] $end
    $var wire 5 O RdM [4:0] $end
    $var wire 1 J RegWriteM $end
    $var wire 2 K ResultSrcM [1:0] $end
   $upscope $end
   $scope module pipeline_FD $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 1 U! clk $end
    $var wire 1 \ StallD $end
    $var wire 1 Z FlushD $end
    $var wire 32 * pcF [31:0] $end
    $var wire 32 $ instr [31:0] $end
    $var wire 32 + PCPlus4F [31:0] $end
    $var wire 32 , instrD [31:0] $end
    $var wire 32 4 pcD [31:0] $end
    $var wire 32 9 PCPlus4D [31:0] $end
   $upscope $end
   $scope module pipeline_MW_inst $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 1 U! clk $end
    $var wire 32 M ALUResultM [31:0] $end
    $var wire 32 Y rd [31:0] $end
    $var wire 5 O RdM [4:0] $end
    $var wire 1 J RegWriteM $end
    $var wire 32 P PCPlus4M [31:0] $end
    $var wire 2 K ResultSrcM [1:0] $end
    $var wire 32 U ReadDataW [31:0] $end
    $var wire 5 V RdW [4:0] $end
    $var wire 1 R RegWriteW $end
    $var wire 32 W PCPlus4W [31:0] $end
    $var wire 32 T ALUResultW [31:0] $end
    $var wire 2 S ResultSrcW [1:0] $end
   $upscope $end
   $scope module registers $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 1 U! clk $end
    $var wire 5 5 a1 [4:0] $end
    $var wire 5 6 a2 [4:0] $end
    $var wire 5 V a3 [4:0] $end
    $var wire 1 R we3 $end
    $var wire 32 X wd3 [31:0] $end
    $var wire 1 W! t0 $end
    $var wire 32 Y! rd1 [31:0] $end
    $var wire 32 Z! rd2 [31:0] $end
    $var wire 32 X! a0 [31:0] $end
    $var wire 32 5! rf[0] [31:0] $end
    $var wire 32 6! rf[1] [31:0] $end
    $var wire 32 7! rf[2] [31:0] $end
    $var wire 32 8! rf[3] [31:0] $end
    $var wire 32 9! rf[4] [31:0] $end
    $var wire 32 :! rf[5] [31:0] $end
    $var wire 32 ;! rf[6] [31:0] $end
    $var wire 32 <! rf[7] [31:0] $end
    $var wire 32 =! rf[8] [31:0] $end
    $var wire 32 >! rf[9] [31:0] $end
    $var wire 32 ?! rf[10] [31:0] $end
    $var wire 32 @! rf[11] [31:0] $end
    $var wire 32 A! rf[12] [31:0] $end
    $var wire 32 B! rf[13] [31:0] $end
    $var wire 32 C! rf[14] [31:0] $end
    $var wire 32 D! rf[15] [31:0] $end
    $var wire 32 E! rf[16] [31:0] $end
    $var wire 32 F! rf[17] [31:0] $end
    $var wire 32 G! rf[18] [31:0] $end
    $var wire 32 H! rf[19] [31:0] $end
    $var wire 32 I! rf[20] [31:0] $end
    $var wire 32 J! rf[21] [31:0] $end
    $var wire 32 K! rf[22] [31:0] $end
    $var wire 32 L! rf[23] [31:0] $end
    $var wire 32 M! rf[24] [31:0] $end
    $var wire 32 N! rf[25] [31:0] $end
    $var wire 32 O! rf[26] [31:0] $end
    $var wire 32 P! rf[27] [31:0] $end
    $var wire 32 Q! rf[28] [31:0] $end
    $var wire 32 R! rf[29] [31:0] $end
    $var wire 32 S! rf[30] [31:0] $end
    $var wire 32 T! rf[31] [31:0] $end
   $upscope $end
   $scope module top_memory_inst $end
    $var wire 32 [! ADDR_WIDTH [31:0] $end
    $var wire 32 [! DATA_WIDTH [31:0] $end
    $var wire 1 U! clk $end
    $var wire 1 L we $end
    $var wire 1 a MemRead $end
    $var wire 3 Q LS_mode [2:0] $end
    $var wire 32 M a [31:0] $end
    $var wire 32 N wd [31:0] $end
    $var wire 32 Y rd [31:0] $end
    $var wire 32 z rd_cache [31:0] $end
    $var wire 8 { byte3 [7:0] $end
    $var wire 8 | byte2 [7:0] $end
    $var wire 8 } byte1 [7:0] $end
    $var wire 8 ~ byte0 [7:0] $end
    $scope module data_cache_inst $end
     $var wire 32 [! ADDR_WIDTH [31:0] $end
     $var wire 32 [! DATA_WIDTH [31:0] $end
     $var wire 1 U! clk $end
     $var wire 1 L we $end
     $var wire 3 Q LS_mode [2:0] $end
     $var wire 1 a MemRead $end
     $var wire 32 M a [31:0] $end
     $var wire 32 N wd [31:0] $end
     $var wire 32 z rd [31:0] $end
     $var wire 60 !! cache_mem[0] [59:0] $end
     $var wire 60 #! cache_mem[1] [59:0] $end
     $var wire 60 %! cache_mem[2] [59:0] $end
     $var wire 60 '! cache_mem[3] [59:0] $end
     $var wire 60 )! cache_mem[4] [59:0] $end
     $var wire 60 +! cache_mem[5] [59:0] $end
     $var wire 60 -! cache_mem[6] [59:0] $end
     $var wire 60 /! cache_mem[7] [59:0] $end
     $var wire 32 1! temp_rd [31:0] $end
     $var wire 27 2! address_tag [26:0] $end
     $var wire 3 3! cache_index [2:0] $end
     $var wire 2 4! byte_offset [1:0] $end
     $scope module data_memory $end
      $var wire 32 [! addr_width [31:0] $end
      $var wire 32 [! data_width [31:0] $end
      $var wire 32 a! memory_size [31:0] $end
      $var wire 1 U! clk $end
      $var wire 1 L we $end
      $var wire 3 Q LS_mode [2:0] $end
      $var wire 32 M a [31:0] $end
      $var wire 32 N wd [31:0] $end
      $var wire 32 1! rd [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
0(
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000100 +
b00000000000000000000000000000000 ,
0-
b00 .
0/
b000 0
b0000 1
02
b000 3
b00000000000000000000000000000000 4
b00000 5
b00000 6
b00000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b000 :
0;
b00 <
0=
b000 >
b0000 ?
0@
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000 D
b00000 E
b00000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b000 I
0J
b00 K
0L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000 O
b00000000000000000000000000000000 P
b000 Q
0R
b00 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
0Z
0[
0\
b00 ]
b00 ^
0_
0`
0a
b0000000 b
b000 c
b0000000 d
b0000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 g
b00000000000000000000000000000000 k
b00000000 l
b0000000000000000000000 m
b00 n
0o
b00 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
0t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
0w
0x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000 {
b00000000 |
b00000000 }
b00000000 ~
b000000000000000000000000000000000000000000000000000000000000 !!
b000000000000000000000000000000000000000000000000000000000000 #!
b000000000000000000000000000000000000000000000000000000000000 %!
b000000000000000000000000000000000000000000000000000000000000 '!
b000000000000000000000000000000000000000000000000000000000000 )!
b000000000000000000000000000000000000000000000000000000000000 +!
b000000000000000000000000000000000000000000000000000000000000 -!
b000000000000000000000000000000000000000000000000000000000000 /!
b00000000000000000000000000000000 1!
b000000000000000000000000000 2!
b000 3!
b00 4!
b00000000000000000000000000000000 5!
b00000000000000000000000000000000 6!
b00000000000000000000000000000000 7!
b00000000000000000000000000000000 8!
b00000000000000000000000000000000 9!
b00000000000000000000000000000000 :!
b00000000000000000000000000000000 ;!
b00000000000000000000000000000000 <!
b00000000000000000000000000000000 =!
b00000000000000000000000000000000 >!
b00000000000000000000000000000000 ?!
b00000000000000000000000000000000 @!
b00000000000000000000000000000000 A!
b00000000000000000000000000000000 B!
b00000000000000000000000000000000 C!
b00000000000000000000000000000000 D!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 F!
b00000000000000000000000000000000 G!
b00000000000000000000000000000000 H!
b00000000000000000000000000000000 I!
b00000000000000000000000000000000 J!
b00000000000000000000000000000000 K!
b00000000000000000000000000000000 L!
b00000000000000000000000000000000 M!
b00000000000000000000000000000000 N!
b00000000000000000000000000000000 O!
b00000000000000000000000000000000 P!
b00000000000000000000000000000000 Q!
b00000000000000000000000000000000 R!
b00000000000000000000000000000000 S!
b00000000000000000000000000000000 T!
1U!
0V!
0W!
b00000000000000000000000000000000 X!
b00000000000000000000000000000000 Y!
b00000000000000000000000000000000 Z!
b00000000000000000000000000100000 [!
b00000000000000000000000100000000 \!
b00000000000000000000000000000100 ]!
b00000000000000000000000000000010 ^!
b00000000000000000000000000000100 _!
b00000000000000000000000000000010 `!
b00000000000000000000000000001000 a!
