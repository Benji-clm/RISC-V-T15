
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_Golden_Top(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [31:0] a0;

//=======================================================
//  Structural coding
//=======================================================

assign slow_clk = clk_div[12];
top #(32, 32) top_inst (
    .clk(slow_clk),
    .rst(!KEY[0]),
    .trigger(KEY[1]),
    .a0(a0)
);


display display_inst(
    .i_data(a0),
    .o_display0(HEX0),
    .o_display1(HEX1),
    .o_display2(HEX2),
    .o_display3(HEX3),
    .o_display4(HEX4),
    .o_display5(HEX5)
);

//// Clock divider for debugging
reg [24:0] clk_div;
//
always @(posedge MAX10_CLK1_50 or negedge KEY[0]) begin
    if (!KEY[0]) // Reset is active when KEY[0] is low
        clk_div <= 0;
    else
        clk_div <= clk_div + 1;
end
//
//// Connect the divided clock to an LED (e.g., LEDR[0])
//assign LEDR[0] = clk_div[20]; // LED toggles every ~1 second


endmodule
